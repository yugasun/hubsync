name: Issue Sync

on:
  issues:
    types: [opened]

jobs:
  sync:
    name: Sync Docker Images
    # Run only if issue has the hubsync label or title contains [hubsync]
    if: contains(github.event.issue.labels.*.name, 'hubsync') || contains(github.event.issue.title, '[hubsync]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
          cache: true
      
      - name: Build HubSync
        run: make build
      
      - name: Extract image list from issue body
        id: extract
        run: |
          # Extract JSON content from issue body
          CONTENT=$(echo '${{ github.event.issue.body }}' | grep -ozP '{[\s\S]*?}' || echo '')
          
          # Validate JSON format
          if [ -z "$CONTENT" ]; then
            echo "content={\"hubsync\":[]}" >> $GITHUB_OUTPUT
            echo "::warning::No valid JSON content found in issue body"
            exit 0
          fi
          
          # Escape content for GitHub Actions output
          ESCAPED_CONTENT=$(echo "$CONTENT" | jq -c . | sed 's/%/%25/g' | sed 's/\n/%0A/g' | sed 's/\r/%0D/g')
          echo "content=$ESCAPED_CONTENT" >> $GITHUB_OUTPUT
      
      - name: Run HubSync
        id: sync
        run: |
          ./bin/hubsync \
            --username=${{ secrets.DOCKER_USERNAME }} \
            --password=${{ secrets.DOCKER_PASSWORD }} \
            --repository=${{ secrets.DOCKER_REPOSITORY || '' }} \
            --namespace=${{ secrets.DOCKER_NAMESPACE || 'yugasun' }} \
            --content='${{ steps.extract.outputs.content }}'
        continue-on-error: true
      
      - name: Add success label
        if: steps.sync.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['success']
            })
      
      - name: Add failure label and comment
        if: steps.sync.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['failure']
            })
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Image sync failed. Please check the format of your request and try again.\n\nMake sure your JSON is valid and follows the required format: `{ "hubsync": ["image1", "image2"] }`.'
            })
      
      - name: Post success comment with output
        if: steps.sync.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let output;
            try {
              output = fs.readFileSync('output.log', 'utf8');
            } catch (error) {
              output = 'No output file generated';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ Image sync completed successfully!\n\n**Pull Commands:**\n\`\`\`bash\n${output}\n\`\`\``
            })