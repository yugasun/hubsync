name: Issue Sync

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to process"
        required: true
        type: string

jobs:
  process-issue:
    name: Process Issue
    runs-on: ubuntu-latest
    steps:
      - name: Check authorization
        id: auth
        uses: actions/github-script@v7
        with:
          script: |
            let isAuthorized = false;
            let issueNumber = null;

            // Check if user is authorized
            if ('${{ github.actor }}' === 'yugasun' || '${{ github.event_name }}' === 'issues') {
              isAuthorized = true;
            }

            // Get issue number based on event type
            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              issueNumber = parseInt('${{ github.event.inputs.issue_number }}', 10);
            } else {
              issueNumber = context.payload.issue?.number;
            }

            // Set outputs using core module
            core.setOutput('is-authorized', isAuthorized ? 'true' : 'false');
            core.setOutput('issue-number', issueNumber);

            // Log status
            console.log(`Authorization: ${isAuthorized ? 'Approved' : 'Denied'}, Issue #${issueNumber}`);

      - name: Post unauthorized message
        if: steps.auth.outputs.is-authorized == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = parseInt('${{ steps.auth.outputs.issue-number }}', 10);
            if (isNaN(issueNumber)) {
              console.log('Invalid issue number, skipping comment');
              return;
            }

            const unauthorizedMessage = `
            ## ⚠️ Unauthorized Workflow Trigger

            Hi @${{ github.actor }}, thank you for your interest in HubSync!

            This workflow is restricted and can only be triggered by the repository owner (**@yugasun**). 

            ### 🛠️ Want to run your own instance of HubSync?

            1. **Fork this repository** to your GitHub account
            2. **Set up the following secrets** in your repository settings:
               - \`DOCKER_USERNAME\`: Your Docker Hub username
               - \`DOCKER_PASSWORD\`: Your Docker Hub password/token
               - \`DOCKER_NAMESPACE\`: Your Docker Hub namespace (optional)
               - \`DOCKER_REPOSITORY\`: Your Docker Hub repository (optional)
            3. **Enable GitHub Actions** in your forked repository

            Then you can use the workflow in your own repository with your credentials!

            ### 📝 Need help?

            Feel free to open an issue on this repository for assistance.
            `;

            await github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: unauthorizedMessage
            }).catch(error => console.log(`Error posting comment: ${error.message}`));

      - name: Verify issue eligibility
        id: verify
        if: steps.auth.outputs.is-authorized == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            let isEligible = false;
            const issueNumber = parseInt('${{ steps.auth.outputs.issue-number }}', 10);

            // For workflow dispatch events, always eligible
            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              isEligible = true;
            } 
            // For issue events, check if it has the correct label or title prefix
            else if ('${{ github.event_name }}' === 'issues') {
              const issue = context.payload.issue;
              const hasHubsyncLabel = issue.labels?.some(label => label.name === 'hubsync') || false;
              const hasTitlePrefix = issue.title?.includes('[hubsync]') || false;
              
              isEligible = hasHubsyncLabel || hasTitlePrefix;
            }

            core.setOutput('is-eligible', isEligible ? 'true' : 'false');
            console.log(`Issue #${issueNumber} eligibility: ${isEligible ? 'Eligible' : 'Not eligible'}`);

            // If not eligible but authorized, add a comment explaining why
            if (!isEligible && '${{ github.event_name }}' === 'issues') {
              await github.rest.issues.createComment({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ℹ️ Issue Not Processed
                
                This issue was not processed because it doesn't include the required \`hubsync\` label or \`[hubsync]\` in the title.
                
                To process this issue, either:
                - Add the \`hubsync\` label to this issue
                - Edit the title to include \`[hubsync]\`
                
                The issue body should contain valid JSON with the following format:
                \`\`\`json
                {
                  "hubsync": [
                    "image1",
                    "image2"
                  ]
                }
                \`\`\`
                `
              }).catch(error => console.log(`Error posting eligibility comment: ${error.message}`));
            }

      - name: Checkout code
        if: steps.verify.outputs.is-eligible == 'true'
        uses: actions/checkout@v4

      - name: Setup Golang
        if: steps.verify.outputs.is-eligible == 'true'
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build HubSync
        if: steps.verify.outputs.is-eligible == 'true'
        run: make build

      - name: Extract image list from issue body
        if: steps.verify.outputs.is-eligible == 'true'
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = parseInt('${{ steps.auth.outputs.issue-number }}', 10);
            let issueBody = '';

            // Get issue body based on event type
            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              // For manual workflow dispatch, fetch the issue content
              try {
                const issue = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                issueBody = issue.data.body || '';
              } catch (error) {
                core.setFailed(`Error retrieving issue: ${error.message}`);
                return;
              }
            } else {
              // For issue events, use the event payload
              issueBody = context.payload.issue?.body || '';
            }

            // Try to extract JSON format with improved parsing
            let content = '';
            let status = 'invalid';

            try {
              // First try to find any JSON-like structure 
              let jsonContent = '';
              
              // Method 1: Try to match content between curly braces
              const bracesMatch = issueBody.match(/{[\s\S]*?}/);
              if (bracesMatch) {
                jsonContent = bracesMatch[0];
              } 
              // Method 2: Try to find content with "hubsync" anywhere in the text
              else {
                const hubsyncMatch = issueBody.match(/[\s\S]*?hubsync[\s\S]*?\[[\s\S]*?\][\s\S]*/);
                if (hubsyncMatch) {
                  // Try to extract just enough to make valid JSON
                  const potentialJson = hubsyncMatch[0].trim();
                  jsonContent = potentialJson;
                  
                  // If it doesn't look like valid JSON, try to wrap it
                  if (!potentialJson.startsWith('{')) {
                    jsonContent = `{ "hubsync": ${potentialJson.includes('[') ? potentialJson.substring(potentialJson.indexOf('['), potentialJson.indexOf(']') + 1) : '[]'} }`;
                  }
                }
              }
              
              // Try to parse the extracted content
              if (jsonContent) {
                // Handle badly formatted quotes and escape characters
                jsonContent = jsonContent
                  .replace(/'/g, '"')
                  .replace(/(\w+):/g, '"$1":');
                  
                const parsedContent = JSON.parse(jsonContent);
                
                // Validate expected format
                if (parsedContent && Array.isArray(parsedContent.hubsync)) {
                  content = JSON.stringify(parsedContent);
                  status = 'valid';
                  
                  // Log what we found
                  console.log(`Found valid hubsync config with ${parsedContent.hubsync.length} images`);
                } else {
                  throw new Error('JSON format is invalid; "hubsync" array property is required');
                }
              } else {
                throw new Error('Could not find JSON content in issue body');
              }
            } catch (error) {
              console.log(`Invalid JSON: ${error.message}`);
              // Default to empty array if invalid
              content = JSON.stringify({"hubsync":[]});
            }

            // Set outputs
            core.setOutput('content', content);
            core.setOutput('status', status);
            core.setOutput('issue-number', issueNumber);

      - name: Run HubSync
        id: sync
        if: steps.verify.outputs.is-eligible == 'true' && steps.extract.outputs.status == 'valid'
        run: |
          echo "Starting Docker Hub synchronization..."
          # Using echo directly without temp file improves performance
          ./bin/hubsync \
            --username=${{ secrets.DOCKER_USERNAME }} \
            --password=${{ secrets.DOCKER_PASSWORD }} \
            --repository=${{ secrets.DOCKER_REPOSITORY || '' }} \
            --namespace=${{ secrets.DOCKER_NAMESPACE || 'yugasun' }} \
            --content='${{ steps.extract.outputs.content }}'
        continue-on-error: true

      - name: Post issue update
        if: steps.verify.outputs.is-eligible == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const issueNumber = parseInt('${{ steps.auth.outputs.issue-number }}', 10);
            const syncOutcome = '${{ steps.sync.outcome }}';
            const processStatus = '${{ steps.extract.outputs.status }}';

            console.log(`Starting Post issue update with: Issue #${issueNumber}, Sync outcome: ${syncOutcome}, Process status: ${processStatus}`);

            if (isNaN(issueNumber)) {
              core.setFailed(`Invalid issue number: ${issueNumber}`);
              return;
            }

            try {
              // For invalid JSON or failed sync
              if (processStatus === 'invalid' || syncOutcome === 'failure') {
                console.log('Posting failure update to issue');
                
                // Add failure label
                await github.rest.issues.addLabels({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['failure']
                }).catch(error => {
                  console.log(`Error adding failure labels: ${error.message}`);
                  // Continue execution even if label fails
                });
                
                // Get error details
                let errorLog = '';
                try {
                  if (fs.existsSync('output.log')) {
                    errorLog = fs.readFileSync('output.log', 'utf8');
                  } else {
                    errorLog = 'No output.log found, but operation failed.';
                    console.log('No output.log found for error details');
                  }
                } catch (error) {
                  errorLog = `Error reading output.log: ${error.message}`;
                  console.log(`Error reading output.log: ${error.message}`);
                }
                
                // Post failure comment
                const errorMessage = [
                  '## ❌ Image Sync Failed',
                  '',
                  'Please check the format of your request and try again.',
                  '',
                  '### Troubleshooting',
                  '- Make sure your JSON is valid and follows the required format: `{ "hubsync": ["image1", "image2"] }`',
                  '- Check that the Docker images specified exist and are accessible',
                  '- Verify your credentials have the necessary permissions',
                  '',
                  '### Error Details',
                  '```',
                  errorLog || 'No specific error details available',
                  '```',
                  '',
                  '### Need help?',
                  'Feel free to update this issue with a corrected format.'
                ].join('\n');
                
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: errorMessage
                }).catch(error => {
                  console.log(`Error posting failure comment: ${error.message}`);
                  core.setFailed(`Error posting failure comment: ${error.message}`);
                });
                
                console.log('Failure update posted successfully');
              } 
              // For successful sync
              else if (syncOutcome === 'success') {
                console.log('Posting success update to issue');
                
                // Add success labels
                await github.rest.issues.addLabels({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: ['success', 'synchronized']
                }).catch(error => {
                  console.log(`Error adding success labels: ${error.message}`);
                  // Continue execution even if label fails
                });
                
                // Get output information
                let output = 'No output file generated, but operation completed successfully.';
                try {
                  if (fs.existsSync('output.log')) {
                    output = fs.readFileSync('output.log', 'utf8').trim();
                  } else {
                    console.log('No output.log found for success details');
                  }
                } catch (error) {
                  console.log(`Error reading output.log: ${error.message}`);
                  // Keep default message
                }
                
                // Get image count safely
                let imageCount = 0;
                try {
                  const contentRaw = '${{ steps.extract.outputs.content }}';
                  if (contentRaw) {
                    const contentObj = JSON.parse(contentRaw);
                    imageCount = contentObj && contentObj.hubsync && Array.isArray(contentObj.hubsync) 
                      ? contentObj.hubsync.length 
                      : 0;
                  } else {
                    console.log('Extract content output is empty');
                    imageCount = 'unknown number of';
                  }
                } catch (e) {
                  console.log(`Error parsing content: ${e.message}`);
                  imageCount = "some";
                }
                
                // Post success message
                const successMessage = [
                  '## ✅ Image Sync Completed Successfully!',
                  '',
                  `Successfully synchronized **${imageCount}** Docker image(s).`,
                  '',
                  '### Pull Commands',
                  '```bash',
                  output,
                  '```'
                ].join('\n');
                
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: successMessage
                }).catch(error => {
                  console.log(`Error posting success comment: ${error.message}`);
                  core.setFailed(`Error posting success comment: ${error.message}`);
                });
                
                // Close issue
                await github.rest.issues.update({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'closed',
                  state_reason: 'completed'
                }).catch(error => {
                  console.log(`Error closing issue: ${error.message}`);
                });
                
                console.log('Success update posted and issue closed successfully');
              }
              // If neither success nor failure (unexpected state)
              else {
                console.log(`Unexpected state: syncOutcome=${syncOutcome}, processStatus=${processStatus}`);
                
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ⚠️ Processing Status Unclear
                  
                  The workflow completed, but the final status of the synchronization could not be determined.
                  
                  Status Information:
                  - Process status: \`${processStatus}\`
                  - Sync outcome: \`${syncOutcome}\`
                  
                  Please check the workflow logs for more details, or try running the workflow again.`
                }).catch(error => {
                  console.log(`Error posting status unclear comment: ${error.message}`);
                });
              }
            } catch (error) {
              console.log(`Unexpected error in Post issue update: ${error.message}`);
              core.setFailed(`Unexpected error in Post issue update: ${error.message}`);
            }
