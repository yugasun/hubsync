name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false # Don't cancel release process once started

jobs:
  # Generate version using semantic release
  version:
    name: Generate Version
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/version.yml
    with:
      release_type: ${{ github.event.inputs.release_type || '' }}
    secrets: inherit

  # Build binaries if new version was created or if this is a tag push
  build:
    name: Build Binaries
    needs: [version]
    if: needs.version.outputs.is_new_release == 'true' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ needs.version.outputs.version || github.ref }}
    secrets: inherit

  # Publish release after building
  publish:
    name: Publish Release
    needs: [version, build]
    if: needs.build.outputs.artifacts_created == 'true' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/publish.yml
    with:
      version: ${{ needs.version.outputs.version || github.ref }}
    secrets: inherit

  # Update install script with latest version
  update-install:
    name: Update Install Script
    needs: [version, publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.version.outputs.is_new_release == 'true' || github.event_name == 'workflow_dispatch' && needs.version.outputs.is_new_release == 'true'
    uses: ./.github/workflows/update-install.yml
    with:
      version: ${{ needs.version.outputs.version }}
    secrets: inherit

  # Trigger Docker workflow after a successful release  
  trigger-docker:
    name: Trigger Docker Build
    needs: [version, publish]
    if: needs.version.outputs.is_new_release == 'true' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Docker workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const version = '${{ needs.version.outputs.version || github.ref }}'.replace('refs/tags/', '');
            console.log(`Triggering Docker build for version: ${version}`);
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker.yml',
              ref: 'main',
              inputs: {
                version: version
              }
            });

  # Trigger Homebrew workflow after a successful release
  trigger-homebrew:
    name: Trigger Homebrew Update
    needs: [version, publish]
    if: needs.version.outputs.is_new_release == 'true' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Homebrew workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const version = '${{ needs.version.outputs.version || github.ref }}'.replace('refs/tags/', '');
            const versionWithoutV = version.replace(/^v/, '');
            console.log(`Triggering Homebrew update for version: ${versionWithoutV}`);
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'homebrew.yml',
              ref: 'main',
              inputs: {
                version: versionWithoutV
              }
            });