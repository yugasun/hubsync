name: Test

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/test.yml'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/test.yml'
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Automatically cancel redundant runs

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod # Use Go version specified in the project
          cache: true
          cache-dependency-path: go.sum

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
          skip-pkg-cache: true
          skip-build-cache: true

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "The following files are not formatted properly:"
            gofmt -l .
            exit 1
          fi

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Run unit tests with coverage
        run: |
          mkdir -p reports
          go test -race -coverprofile=reports/coverage.out -covermode=atomic ./...
          go tool cover -html=reports/coverage.out -o reports/coverage.html
          go tool cover -func=reports/coverage.out
          
          # Calculate and display coverage percentage
          COVERAGE=$(go tool cover -func=reports/coverage.out | grep total | awk '{print $3}')
          echo "Total coverage: $COVERAGE"
          
          # Determine status based on coverage threshold
          THRESHOLD="70.0%"
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "Warning: Code coverage $COVERAGE is below target threshold $THRESHOLD"
          else
            echo "Success: Code coverage $COVERAGE meets or exceeds target threshold $THRESHOLD"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: reports/
          retention-days: 7
          if-no-files-found: error

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Golang
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          mkdir -p reports
          gosec -no-fail -fmt=json -out=reports/gosec-report.json ./...
          gosec -no-fail -fmt=sarif -out=reports/gosec-report.sarif ./...
          gosec -no-fail ./...
          
          # Check if any high severity issues were found
          HIGH_SEVERITY_COUNT=$(cat reports/gosec-report.json | grep -c "HIGH" || true)
          if [ "$HIGH_SEVERITY_COUNT" -gt 0 ]; then
            echo "Warning: $HIGH_SEVERITY_COUNT high severity security issues found"
          else
            echo "No high severity security issues found"
          fi

      - name: Upload gosec report
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/gosec-*.{json,sarif}
          retention-days: 7
          if-no-files-found: error
      
      # Upload results to GitHub Security tab
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/gosec-report.sarif
          category: gosec